#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.18444
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CDDSS_API.Models.Domain
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="cddss")]
	public partial class DataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnCreated();
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertAccessObject(AccessObject instance);
    partial void UpdateAccessObject(AccessObject instance);
    partial void DeleteAccessObject(AccessObject instance);
    partial void InsertAccessRight(AccessRight instance);
    partial void UpdateAccessRight(AccessRight instance);
    partial void DeleteAccessRight(AccessRight instance);
    partial void InsertIssue(Issue instance);
    partial void UpdateIssue(Issue instance);
    partial void DeleteIssue(Issue instance);
    partial void InsertDocument(Document instance);
    partial void UpdateDocument(Document instance);
    partial void DeleteDocument(Document instance);
    partial void InsertCriterion(Criterion instance);
    partial void UpdateCriterion(Criterion instance);
    partial void DeleteCriterion(Criterion instance);
    partial void InsertTag_Issue(Tag_Issue instance);
    partial void UpdateTag_Issue(Tag_Issue instance);
    partial void DeleteTag_Issue(Tag_Issue instance);
    partial void InsertTag(Tag instance);
    partial void UpdateTag(Tag instance);
    partial void DeleteTag(Tag instance);
    partial void InsertIssue_artefact(Issue_artefact instance);
    partial void UpdateIssue_artefact(Issue_artefact instance);
    partial void DeleteIssue_artefact(Issue_artefact instance);
    partial void InsertIssue_stakeholder(Issue_stakeholder instance);
    partial void UpdateIssue_stakeholder(Issue_stakeholder instance);
    partial void DeleteIssue_stakeholder(Issue_stakeholder instance);
    partial void InsertInfluenceFactor(InfluenceFactor instance);
    partial void UpdateInfluenceFactor(InfluenceFactor instance);
    partial void DeleteInfluenceFactor(InfluenceFactor instance);
    partial void InsertArtefact(Artefact instance);
    partial void UpdateArtefact(Artefact instance);
    partial void DeleteArtefact(Artefact instance);
    partial void InsertStakeholder(Stakeholder instance);
    partial void UpdateStakeholder(Stakeholder instance);
    partial void DeleteStakeholder(Stakeholder instance);
    partial void InsertAlternative(Alternative instance);
    partial void UpdateAlternative(Alternative instance);
    partial void DeleteAlternative(Alternative instance);
    partial void InsertRating(Rating instance);
    partial void UpdateRating(Rating instance);
    partial void DeleteRating(Rating instance);
    #endregion
		
		public DataClassesDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<AccessObject> AccessObjects
		{
			get
			{
				return this.GetTable<AccessObject>();
			}
		}
		
		public System.Data.Linq.Table<AccessRight> AccessRights
		{
			get
			{
				return this.GetTable<AccessRight>();
			}
		}
		
		public System.Data.Linq.Table<Issue> Issues
		{
			get
			{
				return this.GetTable<Issue>();
			}
		}
		
		public System.Data.Linq.Table<Document> Documents
		{
			get
			{
				return this.GetTable<Document>();
			}
		}
		
		public System.Data.Linq.Table<Criterion> Criterion
		{
			get
			{
				return this.GetTable<Criterion>();
			}
		}
		
		public System.Data.Linq.Table<Tag_Issue> Tag_Issues
		{
			get
			{
				return this.GetTable<Tag_Issue>();
			}
		}
		
		public System.Data.Linq.Table<Tag> Tags
		{
			get
			{
				return this.GetTable<Tag>();
			}
		}
		
		public System.Data.Linq.Table<Issue_artefact> Issue_artefacts
		{
			get
			{
				return this.GetTable<Issue_artefact>();
			}
		}
		
		public System.Data.Linq.Table<Issue_stakeholder> Issue_stakeholders
		{
			get
			{
				return this.GetTable<Issue_stakeholder>();
			}
		}
		
		public System.Data.Linq.Table<InfluenceFactor> InfluenceFactors
		{
			get
			{
				return this.GetTable<InfluenceFactor>();
			}
		}
		
		public System.Data.Linq.Table<Artefact> Artefacts
		{
			get
			{
				return this.GetTable<Artefact>();
			}
		}
		
		public System.Data.Linq.Table<Stakeholder> Stakeholders
		{
			get
			{
				return this.GetTable<Stakeholder>();
			}
		}
		
		public System.Data.Linq.Table<Alternative> Alternatives
		{
			get
			{
				return this.GetTable<Alternative>();
			}
		}
		
		public System.Data.Linq.Table<Rating> Rating
		{
			get
			{
				return this.GetTable<Rating>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private string _Email;
		
		private bool _EmailConfirmed;
		
		private string _PasswordHash;
		
		private string _SecurityStamp;
		
		private string _PhoneNumber;
		
		private bool _PhoneNumberConfirmed;
		
		private bool _TwoFactorEnabled;
		
		private System.Nullable<System.DateTime> _LockoutEndDateUtc;
		
		private bool _LockoutEnabled;
		
		private int _AccessFailedCount;
		
		private string _UserName;
		
		private System.Nullable<int> _AccessObject;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _SecretQuestion;
		
		private string _Answer;
		
		private EntitySet<Rating> _Rating;
		
		private EntityRef<AccessObject> _AccessObject1;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnEmailConfirmedChanging(bool value);
    partial void OnEmailConfirmedChanged();
    partial void OnPasswordHashChanging(string value);
    partial void OnPasswordHashChanged();
    partial void OnSecurityStampChanging(string value);
    partial void OnSecurityStampChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnPhoneNumberConfirmedChanging(bool value);
    partial void OnPhoneNumberConfirmedChanged();
    partial void OnTwoFactorEnabledChanging(bool value);
    partial void OnTwoFactorEnabledChanged();
    partial void OnLockoutEndDateUtcChanging(System.Nullable<System.DateTime> value);
    partial void OnLockoutEndDateUtcChanged();
    partial void OnLockoutEnabledChanging(bool value);
    partial void OnLockoutEnabledChanged();
    partial void OnAccessFailedCountChanging(int value);
    partial void OnAccessFailedCountChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnAccessObjectChanging(System.Nullable<int> value);
    partial void OnAccessObjectChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnSecretQuestionChanging(string value);
    partial void OnSecretQuestionChanged();
    partial void OnAnswerChanging(string value);
    partial void OnAnswerChanged();
    #endregion
		
		public User()
		{
			this._Rating = new EntitySet<Rating>(new Action<Rating>(this.attach_Rating), new Action<Rating>(this.detach_Rating));
			this._AccessObject1 = default(EntityRef<AccessObject>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(256)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailConfirmed", DbType="Bit NOT NULL")]
		public bool EmailConfirmed
		{
			get
			{
				return this._EmailConfirmed;
			}
			set
			{
				if ((this._EmailConfirmed != value))
				{
					this.OnEmailConfirmedChanging(value);
					this.SendPropertyChanging();
					this._EmailConfirmed = value;
					this.SendPropertyChanged("EmailConfirmed");
					this.OnEmailConfirmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordHash", DbType="NVarChar(MAX)")]
		public string PasswordHash
		{
			get
			{
				return this._PasswordHash;
			}
			set
			{
				if ((this._PasswordHash != value))
				{
					this.OnPasswordHashChanging(value);
					this.SendPropertyChanging();
					this._PasswordHash = value;
					this.SendPropertyChanged("PasswordHash");
					this.OnPasswordHashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecurityStamp", DbType="NVarChar(MAX)")]
		public string SecurityStamp
		{
			get
			{
				return this._SecurityStamp;
			}
			set
			{
				if ((this._SecurityStamp != value))
				{
					this.OnSecurityStampChanging(value);
					this.SendPropertyChanging();
					this._SecurityStamp = value;
					this.SendPropertyChanged("SecurityStamp");
					this.OnSecurityStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="NVarChar(MAX)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumberConfirmed", DbType="Bit NOT NULL")]
		public bool PhoneNumberConfirmed
		{
			get
			{
				return this._PhoneNumberConfirmed;
			}
			set
			{
				if ((this._PhoneNumberConfirmed != value))
				{
					this.OnPhoneNumberConfirmedChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumberConfirmed = value;
					this.SendPropertyChanged("PhoneNumberConfirmed");
					this.OnPhoneNumberConfirmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TwoFactorEnabled", DbType="Bit NOT NULL")]
		public bool TwoFactorEnabled
		{
			get
			{
				return this._TwoFactorEnabled;
			}
			set
			{
				if ((this._TwoFactorEnabled != value))
				{
					this.OnTwoFactorEnabledChanging(value);
					this.SendPropertyChanging();
					this._TwoFactorEnabled = value;
					this.SendPropertyChanged("TwoFactorEnabled");
					this.OnTwoFactorEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LockoutEndDateUtc", DbType="DateTime")]
		public System.Nullable<System.DateTime> LockoutEndDateUtc
		{
			get
			{
				return this._LockoutEndDateUtc;
			}
			set
			{
				if ((this._LockoutEndDateUtc != value))
				{
					this.OnLockoutEndDateUtcChanging(value);
					this.SendPropertyChanging();
					this._LockoutEndDateUtc = value;
					this.SendPropertyChanged("LockoutEndDateUtc");
					this.OnLockoutEndDateUtcChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LockoutEnabled", DbType="Bit NOT NULL")]
		public bool LockoutEnabled
		{
			get
			{
				return this._LockoutEnabled;
			}
			set
			{
				if ((this._LockoutEnabled != value))
				{
					this.OnLockoutEnabledChanging(value);
					this.SendPropertyChanging();
					this._LockoutEnabled = value;
					this.SendPropertyChanged("LockoutEnabled");
					this.OnLockoutEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessFailedCount", DbType="Int NOT NULL")]
		public int AccessFailedCount
		{
			get
			{
				return this._AccessFailedCount;
			}
			set
			{
				if ((this._AccessFailedCount != value))
				{
					this.OnAccessFailedCountChanging(value);
					this.SendPropertyChanging();
					this._AccessFailedCount = value;
					this.SendPropertyChanged("AccessFailedCount");
					this.OnAccessFailedCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessObject", DbType="Int")]
		public System.Nullable<int> AccessObject
		{
			get
			{
				return this._AccessObject;
			}
			set
			{
				if ((this._AccessObject != value))
				{
					if (this._AccessObject1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccessObjectChanging(value);
					this.SendPropertyChanging();
					this._AccessObject = value;
					this.SendPropertyChanged("AccessObject");
					this.OnAccessObjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(40)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(40)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecretQuestion", DbType="VarChar(256)")]
		public string SecretQuestion
		{
			get
			{
				return this._SecretQuestion;
			}
			set
			{
				if ((this._SecretQuestion != value))
				{
					this.OnSecretQuestionChanging(value);
					this.SendPropertyChanging();
					this._SecretQuestion = value;
					this.SendPropertyChanged("SecretQuestion");
					this.OnSecretQuestionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Answer", DbType="VarChar(40)")]
		public string Answer
		{
			get
			{
				return this._Answer;
			}
			set
			{
				if ((this._Answer != value))
				{
					this.OnAnswerChanging(value);
					this.SendPropertyChanging();
					this._Answer = value;
					this.SendPropertyChanged("Answer");
					this.OnAnswerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Rating", Storage="_Rating", ThisKey="Id", OtherKey="User")]
		public EntitySet<Rating> Rating
		{
			get
			{
				return this._Rating;
			}
			set
			{
				this._Rating.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccessObject_User", Storage="_AccessObject1", ThisKey="AccessObject", OtherKey="Id", IsForeignKey=true)]
		public AccessObject AccessObject1
		{
			get
			{
				return this._AccessObject1.Entity;
			}
			set
			{
				AccessObject previousValue = this._AccessObject1.Entity;
				if (((previousValue != value) 
							|| (this._AccessObject1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccessObject1.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._AccessObject1.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._AccessObject = value.Id;
					}
					else
					{
						this._AccessObject = default(Nullable<int>);
					}
					this.SendPropertyChanged("AccessObject1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Rating(Rating entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_Rating(Rating entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccessObject")]
	public partial class AccessObject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private EntitySet<User> _Users;
		
		private EntitySet<AccessRight> _AccessRights;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    #endregion
		
		public AccessObject()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._AccessRights = new EntitySet<AccessRight>(new Action<AccessRight>(this.attach_AccessRights), new Action<AccessRight>(this.detach_AccessRights));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccessObject_User", Storage="_Users", ThisKey="Id", OtherKey="AccessObject")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccessObject_AccessRight", Storage="_AccessRights", ThisKey="Id", OtherKey="AccessObject")]
		public EntitySet<AccessRight> AccessRights
		{
			get
			{
				return this._AccessRights;
			}
			set
			{
				this._AccessRights.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.AccessObject1 = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.AccessObject1 = null;
		}
		
		private void attach_AccessRights(AccessRight entity)
		{
			this.SendPropertyChanging();
			entity.AccessObject1 = this;
		}
		
		private void detach_AccessRights(AccessRight entity)
		{
			this.SendPropertyChanging();
			entity.AccessObject1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccessRight")]
	public partial class AccessRight : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AccessObject;
		
		private int _Issue;
		
		private char _Right;
		
		private EntityRef<AccessObject> _AccessObject1;
		
		private EntityRef<Issue> _Issue1;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccessObjectChanging(int value);
    partial void OnAccessObjectChanged();
    partial void OnIssueChanging(int value);
    partial void OnIssueChanged();
    partial void OnRightChanging(char value);
    partial void OnRightChanged();
    #endregion
		
		public AccessRight()
		{
			this._AccessObject1 = default(EntityRef<AccessObject>);
			this._Issue1 = default(EntityRef<Issue>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessObject", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AccessObject
		{
			get
			{
				return this._AccessObject;
			}
			set
			{
				if ((this._AccessObject != value))
				{
					if (this._AccessObject1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccessObjectChanging(value);
					this.SendPropertyChanging();
					this._AccessObject = value;
					this.SendPropertyChanged("AccessObject");
					this.OnAccessObjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Issue", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Issue
		{
			get
			{
				return this._Issue;
			}
			set
			{
				if ((this._Issue != value))
				{
					if (this._Issue1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIssueChanging(value);
					this.SendPropertyChanging();
					this._Issue = value;
					this.SendPropertyChanged("Issue");
					this.OnIssueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Right]", Storage="_Right", DbType="Char(1) NOT NULL")]
		public char Right
		{
			get
			{
				return this._Right;
			}
			set
			{
				if ((this._Right != value))
				{
					this.OnRightChanging(value);
					this.SendPropertyChanging();
					this._Right = value;
					this.SendPropertyChanged("Right");
					this.OnRightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccessObject_AccessRight", Storage="_AccessObject1", ThisKey="AccessObject", OtherKey="Id", IsForeignKey=true)]
		public AccessObject AccessObject1
		{
			get
			{
				return this._AccessObject1.Entity;
			}
			set
			{
				AccessObject previousValue = this._AccessObject1.Entity;
				if (((previousValue != value) 
							|| (this._AccessObject1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccessObject1.Entity = null;
						previousValue.AccessRights.Remove(this);
					}
					this._AccessObject1.Entity = value;
					if ((value != null))
					{
						value.AccessRights.Add(this);
						this._AccessObject = value.Id;
					}
					else
					{
						this._AccessObject = default(int);
					}
					this.SendPropertyChanged("AccessObject1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Issue_AccessRight", Storage="_Issue1", ThisKey="Issue", OtherKey="Id", IsForeignKey=true)]
		public Issue Issue1
		{
			get
			{
				return this._Issue1.Entity;
			}
			set
			{
				Issue previousValue = this._Issue1.Entity;
				if (((previousValue != value) 
							|| (this._Issue1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Issue1.Entity = null;
						previousValue.AccessRights.Remove(this);
					}
					this._Issue1.Entity = value;
					if ((value != null))
					{
						value.AccessRights.Add(this);
						this._Issue = value.Id;
					}
					else
					{
						this._Issue = default(int);
					}
					this.SendPropertyChanged("Issue1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Issue")]
	public partial class Issue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Title;
		
		private string _Status;
		
		private string _Description;
		
		private System.Nullable<int> _RelatedTo;
		
		private System.Nullable<char> _RelationType;
		
		private System.Nullable<double> _ReviewRating;
		
		private EntitySet<AccessRight> _AccessRights;
		
		private EntitySet<Issue> _Issues;
		
		private EntitySet<Document> _Documents;
		
		private EntitySet<Criterion> _Criterion;
		
		private EntitySet<Tag_Issue> _Tag_Issues;
		
		private EntitySet<Issue_artefact> _Issue_artefacts;
		
		private EntitySet<Issue_stakeholder> _Issue_stakeholders;
		
		private EntitySet<InfluenceFactor> _InfluenceFactors;
		
		private EntitySet<Alternative> _Alternatives;
		
		private EntityRef<Issue> _Issue1;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnRelatedToChanging(System.Nullable<int> value);
    partial void OnRelatedToChanged();
    partial void OnRelationTypeChanging(System.Nullable<char> value);
    partial void OnRelationTypeChanged();
    partial void OnReviewRatingChanging(System.Nullable<double> value);
    partial void OnReviewRatingChanged();
    #endregion
		
		public Issue()
		{
			this._AccessRights = new EntitySet<AccessRight>(new Action<AccessRight>(this.attach_AccessRights), new Action<AccessRight>(this.detach_AccessRights));
			this._Issues = new EntitySet<Issue>(new Action<Issue>(this.attach_Issues), new Action<Issue>(this.detach_Issues));
			this._Documents = new EntitySet<Document>(new Action<Document>(this.attach_Documents), new Action<Document>(this.detach_Documents));
			this._Criterion = new EntitySet<Criterion>(new Action<Criterion>(this.attach_Criterion), new Action<Criterion>(this.detach_Criterion));
			this._Tag_Issues = new EntitySet<Tag_Issue>(new Action<Tag_Issue>(this.attach_Tag_Issues), new Action<Tag_Issue>(this.detach_Tag_Issues));
			this._Issue_artefacts = new EntitySet<Issue_artefact>(new Action<Issue_artefact>(this.attach_Issue_artefacts), new Action<Issue_artefact>(this.detach_Issue_artefacts));
			this._Issue_stakeholders = new EntitySet<Issue_stakeholder>(new Action<Issue_stakeholder>(this.attach_Issue_stakeholders), new Action<Issue_stakeholder>(this.detach_Issue_stakeholders));
			this._InfluenceFactors = new EntitySet<InfluenceFactor>(new Action<InfluenceFactor>(this.attach_InfluenceFactors), new Action<InfluenceFactor>(this.detach_InfluenceFactors));
			this._Alternatives = new EntitySet<Alternative>(new Action<Alternative>(this.attach_Alternatives), new Action<Alternative>(this.detach_Alternatives));
			this._Issue1 = default(EntityRef<Issue>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(8000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelatedTo", DbType="Int")]
		public System.Nullable<int> RelatedTo
		{
			get
			{
				return this._RelatedTo;
			}
			set
			{
				if ((this._RelatedTo != value))
				{
					if (this._Issue1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRelatedToChanging(value);
					this.SendPropertyChanging();
					this._RelatedTo = value;
					this.SendPropertyChanged("RelatedTo");
					this.OnRelatedToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelationType", DbType="Char(1)")]
		public System.Nullable<char> RelationType
		{
			get
			{
				return this._RelationType;
			}
			set
			{
				if ((this._RelationType != value))
				{
					this.OnRelationTypeChanging(value);
					this.SendPropertyChanging();
					this._RelationType = value;
					this.SendPropertyChanged("RelationType");
					this.OnRelationTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReviewRating", DbType="Float")]
		public System.Nullable<double> ReviewRating
		{
			get
			{
				return this._ReviewRating;
			}
			set
			{
				if ((this._ReviewRating != value))
				{
					this.OnReviewRatingChanging(value);
					this.SendPropertyChanging();
					this._ReviewRating = value;
					this.SendPropertyChanged("ReviewRating");
					this.OnReviewRatingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Issue_AccessRight", Storage="_AccessRights", ThisKey="Id", OtherKey="Issue")]
		public EntitySet<AccessRight> AccessRights
		{
			get
			{
				return this._AccessRights;
			}
			set
			{
				this._AccessRights.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Issue_Issue", Storage="_Issues", ThisKey="Id", OtherKey="RelatedTo")]
		public EntitySet<Issue> Issues
		{
			get
			{
				return this._Issues;
			}
			set
			{
				this._Issues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Issue_Document", Storage="_Documents", ThisKey="Id", OtherKey="Issue")]
		public EntitySet<Document> Documents
		{
			get
			{
				return this._Documents;
			}
			set
			{
				this._Documents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Issue_Criterion", Storage="_Criterion", ThisKey="Id", OtherKey="Issue")]
		public EntitySet<Criterion> Criterion
		{
			get
			{
				return this._Criterion;
			}
			set
			{
				this._Criterion.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Issue_Tag_Issue", Storage="_Tag_Issues", ThisKey="Id", OtherKey="Issue")]
		public EntitySet<Tag_Issue> Tag_Issues
		{
			get
			{
				return this._Tag_Issues;
			}
			set
			{
				this._Tag_Issues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Issue_Issue_artefact", Storage="_Issue_artefacts", ThisKey="Id", OtherKey="Issue")]
		public EntitySet<Issue_artefact> Issue_artefacts
		{
			get
			{
				return this._Issue_artefacts;
			}
			set
			{
				this._Issue_artefacts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Issue_Issue_stakeholder", Storage="_Issue_stakeholders", ThisKey="Id", OtherKey="Issue")]
		public EntitySet<Issue_stakeholder> Issue_stakeholders
		{
			get
			{
				return this._Issue_stakeholders;
			}
			set
			{
				this._Issue_stakeholders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Issue_InfluenceFactor", Storage="_InfluenceFactors", ThisKey="Id", OtherKey="Issue")]
		public EntitySet<InfluenceFactor> InfluenceFactors
		{
			get
			{
				return this._InfluenceFactors;
			}
			set
			{
				this._InfluenceFactors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Issue_Alternative", Storage="_Alternatives", ThisKey="Id", OtherKey="Issue")]
		public EntitySet<Alternative> Alternatives
		{
			get
			{
				return this._Alternatives;
			}
			set
			{
				this._Alternatives.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Issue_Issue", Storage="_Issue1", ThisKey="RelatedTo", OtherKey="Id", IsForeignKey=true)]
		public Issue Issue1
		{
			get
			{
				return this._Issue1.Entity;
			}
			set
			{
				Issue previousValue = this._Issue1.Entity;
				if (((previousValue != value) 
							|| (this._Issue1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Issue1.Entity = null;
						previousValue.Issues.Remove(this);
					}
					this._Issue1.Entity = value;
					if ((value != null))
					{
						value.Issues.Add(this);
						this._RelatedTo = value.Id;
					}
					else
					{
						this._RelatedTo = default(Nullable<int>);
					}
					this.SendPropertyChanged("Issue1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AccessRights(AccessRight entity)
		{
			this.SendPropertyChanging();
			entity.Issue1 = this;
		}
		
		private void detach_AccessRights(AccessRight entity)
		{
			this.SendPropertyChanging();
			entity.Issue1 = null;
		}
		
		private void attach_Issues(Issue entity)
		{
			this.SendPropertyChanging();
			entity.Issue1 = this;
		}
		
		private void detach_Issues(Issue entity)
		{
			this.SendPropertyChanging();
			entity.Issue1 = null;
		}
		
		private void attach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.Issue1 = this;
		}
		
		private void detach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.Issue1 = null;
		}
		
		private void attach_Criterion(Criterion entity)
		{
			this.SendPropertyChanging();
			entity.Issue1 = this;
		}
		
		private void detach_Criterion(Criterion entity)
		{
			this.SendPropertyChanging();
			entity.Issue1 = null;
		}
		
		private void attach_Tag_Issues(Tag_Issue entity)
		{
			this.SendPropertyChanging();
			entity.Issue1 = this;
		}
		
		private void detach_Tag_Issues(Tag_Issue entity)
		{
			this.SendPropertyChanging();
			entity.Issue1 = null;
		}
		
		private void attach_Issue_artefacts(Issue_artefact entity)
		{
			this.SendPropertyChanging();
			entity.Issue1 = this;
		}
		
		private void detach_Issue_artefacts(Issue_artefact entity)
		{
			this.SendPropertyChanging();
			entity.Issue1 = null;
		}
		
		private void attach_Issue_stakeholders(Issue_stakeholder entity)
		{
			this.SendPropertyChanging();
			entity.Issue1 = this;
		}
		
		private void detach_Issue_stakeholders(Issue_stakeholder entity)
		{
			this.SendPropertyChanging();
			entity.Issue1 = null;
		}
		
		private void attach_InfluenceFactors(InfluenceFactor entity)
		{
			this.SendPropertyChanging();
			entity.Issue1 = this;
		}
		
		private void detach_InfluenceFactors(InfluenceFactor entity)
		{
			this.SendPropertyChanging();
			entity.Issue1 = null;
		}
		
		private void attach_Alternatives(Alternative entity)
		{
			this.SendPropertyChanging();
			entity.Issue1 = this;
		}
		
		private void detach_Alternatives(Alternative entity)
		{
			this.SendPropertyChanging();
			entity.Issue1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Document")]
	public partial class Document : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Issue;
		
		private string _Name;
		
		private System.Data.Linq.Binary _File;
		
		private EntityRef<Issue> _Issue1;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIssueChanging(int value);
    partial void OnIssueChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFileChanging(System.Data.Linq.Binary value);
    partial void OnFileChanged();
    #endregion
		
		public Document()
		{
			this._Issue1 = default(EntityRef<Issue>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Issue", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Issue
		{
			get
			{
				return this._Issue;
			}
			set
			{
				if ((this._Issue != value))
				{
					if (this._Issue1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIssueChanging(value);
					this.SendPropertyChanging();
					this._Issue = value;
					this.SendPropertyChanged("Issue");
					this.OnIssueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(40) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[File]", Storage="_File", DbType="VarBinary(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary File
		{
			get
			{
				return this._File;
			}
			set
			{
				if ((this._File != value))
				{
					this.OnFileChanging(value);
					this.SendPropertyChanging();
					this._File = value;
					this.SendPropertyChanged("File");
					this.OnFileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Issue_Document", Storage="_Issue1", ThisKey="Issue", OtherKey="Id", IsForeignKey=true)]
		public Issue Issue1
		{
			get
			{
				return this._Issue1.Entity;
			}
			set
			{
				Issue previousValue = this._Issue1.Entity;
				if (((previousValue != value) 
							|| (this._Issue1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Issue1.Entity = null;
						previousValue.Documents.Remove(this);
					}
					this._Issue1.Entity = value;
					if ((value != null))
					{
						value.Documents.Add(this);
						this._Issue = value.Id;
					}
					else
					{
						this._Issue = default(int);
					}
					this.SendPropertyChanged("Issue1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Criterion")]
	public partial class Criterion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Description;
		
		private int _Issue;
		
		private System.Nullable<double> _Weight;
		
		private EntitySet<Rating> _Rating;
		
		private EntityRef<Issue> _Issue1;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnIssueChanging(int value);
    partial void OnIssueChanged();
    partial void OnWeightChanging(System.Nullable<double> value);
    partial void OnWeightChanged();
    #endregion
		
		public Criterion()
		{
			this._Rating = new EntitySet<Rating>(new Action<Rating>(this.attach_Rating), new Action<Rating>(this.detach_Rating));
			this._Issue1 = default(EntityRef<Issue>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(200)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Issue", DbType="Int NOT NULL")]
		public int Issue
		{
			get
			{
				return this._Issue;
			}
			set
			{
				if ((this._Issue != value))
				{
					if (this._Issue1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIssueChanging(value);
					this.SendPropertyChanging();
					this._Issue = value;
					this.SendPropertyChanged("Issue");
					this.OnIssueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weight", DbType="Float")]
		public System.Nullable<double> Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this.OnWeightChanging(value);
					this.SendPropertyChanging();
					this._Weight = value;
					this.SendPropertyChanged("Weight");
					this.OnWeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Criterion_Rating", Storage="_Rating", ThisKey="Id", OtherKey="Criterion")]
		public EntitySet<Rating> Rating
		{
			get
			{
				return this._Rating;
			}
			set
			{
				this._Rating.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Issue_Criterion", Storage="_Issue1", ThisKey="Issue", OtherKey="Id", IsForeignKey=true)]
		public Issue Issue1
		{
			get
			{
				return this._Issue1.Entity;
			}
			set
			{
				Issue previousValue = this._Issue1.Entity;
				if (((previousValue != value) 
							|| (this._Issue1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Issue1.Entity = null;
						previousValue.Criterion.Remove(this);
					}
					this._Issue1.Entity = value;
					if ((value != null))
					{
						value.Criterion.Add(this);
						this._Issue = value.Id;
					}
					else
					{
						this._Issue = default(int);
					}
					this.SendPropertyChanged("Issue1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Rating(Rating entity)
		{
			this.SendPropertyChanging();
			entity.Criterion1 = this;
		}
		
		private void detach_Rating(Rating entity)
		{
			this.SendPropertyChanging();
			entity.Criterion1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tag_Issue")]
	public partial class Tag_Issue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Tag;
		
		private int _Issue;
		
		private EntityRef<Issue> _Issue1;
		
		private EntityRef<Tag> _Tag1;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTagChanging(int value);
    partial void OnTagChanged();
    partial void OnIssueChanging(int value);
    partial void OnIssueChanged();
    #endregion
		
		public Tag_Issue()
		{
			this._Issue1 = default(EntityRef<Issue>);
			this._Tag1 = default(EntityRef<Tag>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tag", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Tag
		{
			get
			{
				return this._Tag;
			}
			set
			{
				if ((this._Tag != value))
				{
					if (this._Tag1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTagChanging(value);
					this.SendPropertyChanging();
					this._Tag = value;
					this.SendPropertyChanged("Tag");
					this.OnTagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Issue", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Issue
		{
			get
			{
				return this._Issue;
			}
			set
			{
				if ((this._Issue != value))
				{
					if (this._Issue1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIssueChanging(value);
					this.SendPropertyChanging();
					this._Issue = value;
					this.SendPropertyChanged("Issue");
					this.OnIssueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Issue_Tag_Issue", Storage="_Issue1", ThisKey="Issue", OtherKey="Id", IsForeignKey=true)]
		public Issue Issue1
		{
			get
			{
				return this._Issue1.Entity;
			}
			set
			{
				Issue previousValue = this._Issue1.Entity;
				if (((previousValue != value) 
							|| (this._Issue1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Issue1.Entity = null;
						previousValue.Tag_Issues.Remove(this);
					}
					this._Issue1.Entity = value;
					if ((value != null))
					{
						value.Tag_Issues.Add(this);
						this._Issue = value.Id;
					}
					else
					{
						this._Issue = default(int);
					}
					this.SendPropertyChanged("Issue1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tag_Tag_Issue", Storage="_Tag1", ThisKey="Tag", OtherKey="Id", IsForeignKey=true)]
		public Tag Tag1
		{
			get
			{
				return this._Tag1.Entity;
			}
			set
			{
				Tag previousValue = this._Tag1.Entity;
				if (((previousValue != value) 
							|| (this._Tag1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tag1.Entity = null;
						previousValue.Tag_Issues.Remove(this);
					}
					this._Tag1.Entity = value;
					if ((value != null))
					{
						value.Tag_Issues.Add(this);
						this._Tag = value.Id;
					}
					else
					{
						this._Tag = default(int);
					}
					this.SendPropertyChanged("Tag1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tag")]
	public partial class Tag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Tag_Issue> _Tag_Issues;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Tag()
		{
			this._Tag_Issues = new EntitySet<Tag_Issue>(new Action<Tag_Issue>(this.attach_Tag_Issues), new Action<Tag_Issue>(this.detach_Tag_Issues));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(20)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tag_Tag_Issue", Storage="_Tag_Issues", ThisKey="Id", OtherKey="Tag")]
		public EntitySet<Tag_Issue> Tag_Issues
		{
			get
			{
				return this._Tag_Issues;
			}
			set
			{
				this._Tag_Issues.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tag_Issues(Tag_Issue entity)
		{
			this.SendPropertyChanging();
			entity.Tag1 = this;
		}
		
		private void detach_Tag_Issues(Tag_Issue entity)
		{
			this.SendPropertyChanging();
			entity.Tag1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Issue_artefact")]
	public partial class Issue_artefact : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Issue;
		
		private int _Artefact;
		
		private EntityRef<Issue> _Issue1;
		
		private EntityRef<Artefact> _Artefact1;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIssueChanging(int value);
    partial void OnIssueChanged();
    partial void OnArtefactChanging(int value);
    partial void OnArtefactChanged();
    #endregion
		
		public Issue_artefact()
		{
			this._Issue1 = default(EntityRef<Issue>);
			this._Artefact1 = default(EntityRef<Artefact>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Issue", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Issue
		{
			get
			{
				return this._Issue;
			}
			set
			{
				if ((this._Issue != value))
				{
					if (this._Issue1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIssueChanging(value);
					this.SendPropertyChanging();
					this._Issue = value;
					this.SendPropertyChanged("Issue");
					this.OnIssueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Artefact", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Artefact
		{
			get
			{
				return this._Artefact;
			}
			set
			{
				if ((this._Artefact != value))
				{
					if (this._Artefact1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnArtefactChanging(value);
					this.SendPropertyChanging();
					this._Artefact = value;
					this.SendPropertyChanged("Artefact");
					this.OnArtefactChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Issue_Issue_artefact", Storage="_Issue1", ThisKey="Issue", OtherKey="Id", IsForeignKey=true)]
		public Issue Issue1
		{
			get
			{
				return this._Issue1.Entity;
			}
			set
			{
				Issue previousValue = this._Issue1.Entity;
				if (((previousValue != value) 
							|| (this._Issue1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Issue1.Entity = null;
						previousValue.Issue_artefacts.Remove(this);
					}
					this._Issue1.Entity = value;
					if ((value != null))
					{
						value.Issue_artefacts.Add(this);
						this._Issue = value.Id;
					}
					else
					{
						this._Issue = default(int);
					}
					this.SendPropertyChanged("Issue1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Artefact_Issue_artefact", Storage="_Artefact1", ThisKey="Artefact", OtherKey="Id", IsForeignKey=true)]
		public Artefact Artefact1
		{
			get
			{
				return this._Artefact1.Entity;
			}
			set
			{
				Artefact previousValue = this._Artefact1.Entity;
				if (((previousValue != value) 
							|| (this._Artefact1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Artefact1.Entity = null;
						previousValue.Issue_artefacts.Remove(this);
					}
					this._Artefact1.Entity = value;
					if ((value != null))
					{
						value.Issue_artefacts.Add(this);
						this._Artefact = value.Id;
					}
					else
					{
						this._Artefact = default(int);
					}
					this.SendPropertyChanged("Artefact1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Issue_stakeholder")]
	public partial class Issue_stakeholder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Issue;
		
		private int _Stakeholder;
		
		private EntityRef<Issue> _Issue1;
		
		private EntityRef<Stakeholder> _Stakeholder1;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIssueChanging(int value);
    partial void OnIssueChanged();
    partial void OnStakeholderChanging(int value);
    partial void OnStakeholderChanged();
    #endregion
		
		public Issue_stakeholder()
		{
			this._Issue1 = default(EntityRef<Issue>);
			this._Stakeholder1 = default(EntityRef<Stakeholder>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Issue", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Issue
		{
			get
			{
				return this._Issue;
			}
			set
			{
				if ((this._Issue != value))
				{
					if (this._Issue1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIssueChanging(value);
					this.SendPropertyChanging();
					this._Issue = value;
					this.SendPropertyChanged("Issue");
					this.OnIssueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Stakeholder", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Stakeholder
		{
			get
			{
				return this._Stakeholder;
			}
			set
			{
				if ((this._Stakeholder != value))
				{
					if (this._Stakeholder1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStakeholderChanging(value);
					this.SendPropertyChanging();
					this._Stakeholder = value;
					this.SendPropertyChanged("Stakeholder");
					this.OnStakeholderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Issue_Issue_stakeholder", Storage="_Issue1", ThisKey="Issue", OtherKey="Id", IsForeignKey=true)]
		public Issue Issue1
		{
			get
			{
				return this._Issue1.Entity;
			}
			set
			{
				Issue previousValue = this._Issue1.Entity;
				if (((previousValue != value) 
							|| (this._Issue1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Issue1.Entity = null;
						previousValue.Issue_stakeholders.Remove(this);
					}
					this._Issue1.Entity = value;
					if ((value != null))
					{
						value.Issue_stakeholders.Add(this);
						this._Issue = value.Id;
					}
					else
					{
						this._Issue = default(int);
					}
					this.SendPropertyChanged("Issue1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stakeholder_Issue_stakeholder", Storage="_Stakeholder1", ThisKey="Stakeholder", OtherKey="Id", IsForeignKey=true)]
		public Stakeholder Stakeholder1
		{
			get
			{
				return this._Stakeholder1.Entity;
			}
			set
			{
				Stakeholder previousValue = this._Stakeholder1.Entity;
				if (((previousValue != value) 
							|| (this._Stakeholder1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Stakeholder1.Entity = null;
						previousValue.Issue_stakeholders.Remove(this);
					}
					this._Stakeholder1.Entity = value;
					if ((value != null))
					{
						value.Issue_stakeholders.Add(this);
						this._Stakeholder = value.Id;
					}
					else
					{
						this._Stakeholder = default(int);
					}
					this.SendPropertyChanged("Stakeholder1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InfluenceFactor")]
	public partial class InfluenceFactor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private bool _Type;
		
		private string _Characteristic;
		
		private int _Issue;
		
		private EntityRef<Issue> _Issue1;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTypeChanging(bool value);
    partial void OnTypeChanged();
    partial void OnCharacteristicChanging(string value);
    partial void OnCharacteristicChanged();
    partial void OnIssueChanging(int value);
    partial void OnIssueChanged();
    #endregion
		
		public InfluenceFactor()
		{
			this._Issue1 = default(EntityRef<Issue>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(40) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Bit NOT NULL")]
		public bool Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Characteristic", DbType="VarChar(10)")]
		public string Characteristic
		{
			get
			{
				return this._Characteristic;
			}
			set
			{
				if ((this._Characteristic != value))
				{
					this.OnCharacteristicChanging(value);
					this.SendPropertyChanging();
					this._Characteristic = value;
					this.SendPropertyChanged("Characteristic");
					this.OnCharacteristicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Issue", DbType="Int NOT NULL")]
		public int Issue
		{
			get
			{
				return this._Issue;
			}
			set
			{
				if ((this._Issue != value))
				{
					if (this._Issue1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIssueChanging(value);
					this.SendPropertyChanging();
					this._Issue = value;
					this.SendPropertyChanged("Issue");
					this.OnIssueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Issue_InfluenceFactor", Storage="_Issue1", ThisKey="Issue", OtherKey="Id", IsForeignKey=true)]
		public Issue Issue1
		{
			get
			{
				return this._Issue1.Entity;
			}
			set
			{
				Issue previousValue = this._Issue1.Entity;
				if (((previousValue != value) 
							|| (this._Issue1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Issue1.Entity = null;
						previousValue.InfluenceFactors.Remove(this);
					}
					this._Issue1.Entity = value;
					if ((value != null))
					{
						value.InfluenceFactors.Add(this);
						this._Issue = value.Id;
					}
					else
					{
						this._Issue = default(int);
					}
					this.SendPropertyChanged("Issue1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Artefact")]
	public partial class Artefact : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Issue_artefact> _Issue_artefacts;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Artefact()
		{
			this._Issue_artefacts = new EntitySet<Issue_artefact>(new Action<Issue_artefact>(this.attach_Issue_artefacts), new Action<Issue_artefact>(this.detach_Issue_artefacts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(20)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Artefact_Issue_artefact", Storage="_Issue_artefacts", ThisKey="Id", OtherKey="Artefact")]
		public EntitySet<Issue_artefact> Issue_artefacts
		{
			get
			{
				return this._Issue_artefacts;
			}
			set
			{
				this._Issue_artefacts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Issue_artefacts(Issue_artefact entity)
		{
			this.SendPropertyChanging();
			entity.Artefact1 = this;
		}
		
		private void detach_Issue_artefacts(Issue_artefact entity)
		{
			this.SendPropertyChanging();
			entity.Artefact1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Stakeholder")]
	public partial class Stakeholder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Issue_stakeholder> _Issue_stakeholders;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Stakeholder()
		{
			this._Issue_stakeholders = new EntitySet<Issue_stakeholder>(new Action<Issue_stakeholder>(this.attach_Issue_stakeholders), new Action<Issue_stakeholder>(this.detach_Issue_stakeholders));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stakeholder_Issue_stakeholder", Storage="_Issue_stakeholders", ThisKey="Id", OtherKey="Stakeholder")]
		public EntitySet<Issue_stakeholder> Issue_stakeholders
		{
			get
			{
				return this._Issue_stakeholders;
			}
			set
			{
				this._Issue_stakeholders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Issue_stakeholders(Issue_stakeholder entity)
		{
			this.SendPropertyChanging();
			entity.Stakeholder1 = this;
		}
		
		private void detach_Issue_stakeholders(Issue_stakeholder entity)
		{
			this.SendPropertyChanging();
			entity.Stakeholder1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Alternative")]
	public partial class Alternative : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Issue;
		
		private string _Name;
		
		private string _Description;
		
		private string _Reason;
		
		private System.Nullable<double> _Rating;
		
		private EntitySet<Rating> _Rating1;
		
		private EntityRef<Issue> _Issue1;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIssueChanging(int value);
    partial void OnIssueChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnReasonChanging(string value);
    partial void OnReasonChanged();
    partial void OnRatingChanging(System.Nullable<double> value);
    partial void OnRatingChanged();
    #endregion
		
		public Alternative()
		{
			this._Rating1 = new EntitySet<Rating>(new Action<Rating>(this.attach_Rating1), new Action<Rating>(this.detach_Rating1));
			this._Issue1 = default(EntityRef<Issue>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Issue", DbType="Int NOT NULL")]
		public int Issue
		{
			get
			{
				return this._Issue;
			}
			set
			{
				if ((this._Issue != value))
				{
					if (this._Issue1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIssueChanging(value);
					this.SendPropertyChanging();
					this._Issue = value;
					this.SendPropertyChanged("Issue");
					this.OnIssueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(150)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reason", DbType="VarChar(100)")]
		public string Reason
		{
			get
			{
				return this._Reason;
			}
			set
			{
				if ((this._Reason != value))
				{
					this.OnReasonChanging(value);
					this.SendPropertyChanging();
					this._Reason = value;
					this.SendPropertyChanged("Reason");
					this.OnReasonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rating", DbType="Float")]
		public System.Nullable<double> Rating
		{
			get
			{
				return this._Rating;
			}
			set
			{
				if ((this._Rating != value))
				{
					this.OnRatingChanging(value);
					this.SendPropertyChanging();
					this._Rating = value;
					this.SendPropertyChanged("Rating");
					this.OnRatingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Alternative_Rating", Storage="_Rating1", ThisKey="Id", OtherKey="Alternative")]
		public EntitySet<Rating> Rating1
		{
			get
			{
				return this._Rating1;
			}
			set
			{
				this._Rating1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Issue_Alternative", Storage="_Issue1", ThisKey="Issue", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Issue Issue1
		{
			get
			{
				return this._Issue1.Entity;
			}
			set
			{
				Issue previousValue = this._Issue1.Entity;
				if (((previousValue != value) 
							|| (this._Issue1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Issue1.Entity = null;
						previousValue.Alternatives.Remove(this);
					}
					this._Issue1.Entity = value;
					if ((value != null))
					{
						value.Alternatives.Add(this);
						this._Issue = value.Id;
					}
					else
					{
						this._Issue = default(int);
					}
					this.SendPropertyChanged("Issue1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Rating1(Rating entity)
		{
			this.SendPropertyChanging();
			entity.Alternative1 = this;
		}
		
		private void detach_Rating1(Rating entity)
		{
			this.SendPropertyChanging();
			entity.Alternative1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Rating")]
	public partial class Rating : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Criterion;
		
		private int _Alternative;
		
		private string _User;
		
		private double _Rating1;
		
		private EntityRef<Alternative> _Alternative1;
		
		private EntityRef<Criterion> _Criterion1;
		
		private EntityRef<User> _User1;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCriterionChanging(int value);
    partial void OnCriterionChanged();
    partial void OnAlternativeChanging(int value);
    partial void OnAlternativeChanged();
    partial void OnUserChanging(string value);
    partial void OnUserChanged();
    partial void OnRating1Changing(double value);
    partial void OnRating1Changed();
    #endregion
		
		public Rating()
		{
			this._Alternative1 = default(EntityRef<Alternative>);
			this._Criterion1 = default(EntityRef<Criterion>);
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Criterion", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Criterion
		{
			get
			{
				return this._Criterion;
			}
			set
			{
				if ((this._Criterion != value))
				{
					if (this._Criterion1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCriterionChanging(value);
					this.SendPropertyChanging();
					this._Criterion = value;
					this.SendPropertyChanged("Criterion");
					this.OnCriterionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Alternative", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Alternative
		{
			get
			{
				return this._Alternative;
			}
			set
			{
				if ((this._Alternative != value))
				{
					if (this._Alternative1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAlternativeChanging(value);
					this.SendPropertyChanging();
					this._Alternative = value;
					this.SendPropertyChanged("Alternative");
					this.OnAlternativeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[User]", Storage="_User", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string User
		{
			get
			{
				return this._User;
			}
			set
			{
				if ((this._User != value))
				{
					this.OnUserChanging(value);
					this.SendPropertyChanging();
					this._User = value;
					this.SendPropertyChanged("User");
					this.OnUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Rating", Storage="_Rating1", DbType="Float NOT NULL")]
		public double Rating1
		{
			get
			{
				return this._Rating1;
			}
			set
			{
				if ((this._Rating1 != value))
				{
					this.OnRating1Changing(value);
					this.SendPropertyChanging();
					this._Rating1 = value;
					this.SendPropertyChanged("Rating1");
					this.OnRating1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Alternative_Rating", Storage="_Alternative1", ThisKey="Alternative", OtherKey="Id", IsForeignKey=true)]
		public Alternative Alternative1
		{
			get
			{
				return this._Alternative1.Entity;
			}
			set
			{
				Alternative previousValue = this._Alternative1.Entity;
				if (((previousValue != value) 
							|| (this._Alternative1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Alternative1.Entity = null;
						previousValue.Rating1.Remove(this);
					}
					this._Alternative1.Entity = value;
					if ((value != null))
					{
						value.Rating1.Add(this);
						this._Alternative = value.Id;
					}
					else
					{
						this._Alternative = default(int);
					}
					this.SendPropertyChanged("Alternative1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Criterion_Rating", Storage="_Criterion1", ThisKey="Criterion", OtherKey="Id", IsForeignKey=true)]
		public Criterion Criterion1
		{
			get
			{
				return this._Criterion1.Entity;
			}
			set
			{
				Criterion previousValue = this._Criterion1.Entity;
				if (((previousValue != value) 
							|| (this._Criterion1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Criterion1.Entity = null;
						previousValue.Rating.Remove(this);
					}
					this._Criterion1.Entity = value;
					if ((value != null))
					{
						value.Rating.Add(this);
						this._Criterion = value.Id;
					}
					else
					{
						this._Criterion = default(int);
					}
					this.SendPropertyChanged("Criterion1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Rating", Storage="_User1", ThisKey="User", OtherKey="Id", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.Rating.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.Rating.Add(this);
						this._User = value.Id;
					}
					else
					{
						this._User = default(string);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
